<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAgACswAA
        ACMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgMA
        AtQEAQP/AwACyQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAwABgwQBA/8EAQP/AgACdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAgACfwMAAE4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAADAABDAAAAHwAAAAAAAAAEAwACzwQBA/8DAALyAAAAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAn8EAQP/AwAATgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAgACXAMAAvkDAALGAAAAAwAAAAAAAAA6AwAC/gQBA/8DAAGPAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AnAAAAAAAAAAAAIAArEEAQP/AwAC9AAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAIAAn8EAQP/AwAATgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgACXAMA
        AvkDAALGAAAAAwAAAAAAAAA6AwAC/gQBA/8DAAGPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAn8DAABOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAwAAQwAAAB8AAAAAAAAABAMAAs8EAQP/AwAC8gAAABcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAGDBAED/wQBA/8CAAJ0AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgMAAtQEAQP/AwACyQAAAAMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgIAArMAAAAjAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////4////8H//f/h//n/IP/x/hD/4f4Yf8HyCH+B4wx/AeGEPgH
        ghAAB8IQAAfDGAAH4xgAB+EIAAfhCAAH4QgAB+EIAAfjGAAHwxgAB8IQ+AeCEPwHhhD+B4wx/wfIIf+H
        +GH/x/hD/+f8g//3/4f///8H////j/////8=
</value>
  </data>
</root>